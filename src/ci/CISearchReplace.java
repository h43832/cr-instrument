
package ci;

import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.text.*;
public class CISearchReplace extends javax.swing.JDialog {
    int findIndex=0;
    int currentStart=-1,currentEnd=-1;

    CIEditFrame editFrame=null;
    public CISearchReplace(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.editFrame=(CIEditFrame) parent;
        initComponents();

        int width=Toolkit.getDefaultToolkit().getScreenSize().width;
        int h=Toolkit.getDefaultToolkit().getScreenSize().height-20;
        int w2=522;
        int h2=287;
        setSize(w2,h2);
        setLocation((width-w2)/2,(h-h2)/2);

          setIconImage(editFrame.instrument.iconImage);
        buttonGroup1.add(up);
        buttonGroup1.add(down);
        down.setSelected(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        findAll = new javax.swing.JButton();
        replaceNext = new javax.swing.JButton();
        replaceAll = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        up = new javax.swing.JRadioButton();
        down = new javax.swing.JRadioButton();
        findNext = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel1.setFont(jLabel1.getFont());
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("ci/Bundle"); 
        jLabel1.setText(bundle.getString("CISearchReplace.jLabel1.text")); 
        getContentPane().add(jLabel1);
        jLabel1.setBounds(30, 20, 90, 20);

        jTextField1.setFont(jTextField1.getFont());
        getContentPane().add(jTextField1);
        jTextField1.setBounds(120, 11, 240, 30);

        jLabel2.setFont(jLabel2.getFont());
        jLabel2.setText(bundle.getString("CISearchReplace.jLabel2.text")); 
        getContentPane().add(jLabel2);
        jLabel2.setBounds(30, 55, 90, 20);

        jTextField2.setFont(jTextField2.getFont());
        getContentPane().add(jTextField2);
        jTextField2.setBounds(120, 50, 240, 30);

        findAll.setFont(findAll.getFont());
        findAll.setText(bundle.getString("CISearchReplace.findAll.text")); 
        findAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findAllActionPerformed(evt);
            }
        });
        getContentPane().add(findAll);
        findAll.setBounds(380, 40, 110, 23);

        replaceNext.setFont(replaceNext.getFont());
        replaceNext.setText(bundle.getString("CISearchReplace.replaceNext.text")); 
        replaceNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceNextActionPerformed(evt);
            }
        });
        getContentPane().add(replaceNext);
        replaceNext.setBounds(380, 70, 110, 23);

        replaceAll.setFont(replaceAll.getFont());
        replaceAll.setText(bundle.getString("CISearchReplace.replaceAll.text")); 
        replaceAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceAllActionPerformed(evt);
            }
        });
        getContentPane().add(replaceAll);
        replaceAll.setBounds(380, 100, 110, 23);

        jLabel3.setFont(jLabel3.getFont());
        jLabel3.setText(bundle.getString("CISearchReplace.jLabel3.text")); 
        getContentPane().add(jLabel3);
        jLabel3.setBounds(30, 100, 60, 20);

        up.setFont(up.getFont());
        up.setText(bundle.getString("CISearchReplace.up.text")); 
        up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upActionPerformed(evt);
            }
        });
        getContentPane().add(up);
        up.setBounds(100, 100, 50, 23);

        down.setFont(down.getFont());
        down.setText(bundle.getString("CISearchReplace.down.text")); 
        down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downActionPerformed(evt);
            }
        });
        getContentPane().add(down);
        down.setBounds(170, 100, 70, 23);

        findNext.setFont(findNext.getFont());
        findNext.setText(bundle.getString("CISearchReplace.findNext.text")); 
        findNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findNextActionPerformed(evt);
            }
        });
        getContentPane().add(findNext);
        findNext.setBounds(380, 10, 110, 23);

        jCheckBox1.setFont(jCheckBox1.getFont());
        jCheckBox1.setText(bundle.getString("CISearchReplace.jCheckBox1.text")); 
        getContentPane().add(jCheckBox1);
        jCheckBox1.setBounds(30, 130, 240, 23);

        jButton1.setFont(jButton1.getFont());
        jButton1.setText(bundle.getString("CISearchReplace.jButton1.text")); 
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(380, 130, 110, 23);

        pack();
    }

private void upActionPerformed(java.awt.event.ActionEvent evt) {

}

private void findAllActionPerformed(java.awt.event.ActionEvent evt) {
currentStart=-1; currentEnd=-1;
 if(jTextField1.getText().length()>0) highlight(editFrame.selectedTA,jTextField1.getText());
 else removeHighlights(editFrame.selectedTA);
}

private void replaceNextActionPerformed(java.awt.event.ActionEvent evt) {

    String text = editFrame.selectedTA.getText();

            String repl = jTextField2.getText();
            text=text.substring(0, currentStart)+repl+text.substring(currentEnd);
            editFrame.selectedTA.setText(text);
            currentStart=-1; currentEnd=-1;
            removeHighlights(editFrame.selectedTA);
}

private void replaceAllActionPerformed(java.awt.event.ActionEvent evt) {
    currentStart=-1; currentEnd=-1;
    String text = editFrame.selectedTA.getText();

            String target=jTextField1.getText();
            String repl = jTextField2.getText();
            text=text.replace(target, repl);
            editFrame.previousTA[editFrame.selectedInx]=editFrame.selectedTA.getText();
            editFrame.selectedTA.setText(text);
            editFrame.firstDone[editFrame.selectedInx]=true;

}

private void findNextActionPerformed(java.awt.event.ActionEvent evt) {

                find(jTextField1.getText(),findIndex);  
}
   public void find(String str, int cur) {  

        int i = -1;  
        String textAreaText= editFrame.selectedTA.getText();  
        if(down.isSelected()){
        if(!jCheckBox1.isSelected()){
            i = textAreaText.toUpperCase().indexOf(str.toUpperCase(),cur);  
        }else{
            i = textAreaText.indexOf(str,cur);  
        }  

        if (i >= 0) {  
            

            highlight(editFrame.selectedTA,i,i+str.length());
             currentStart=i; currentEnd=i+str.length();
            findIndex = ++i; 
        } else {  
            if(findIndex == 0){  
                return;  
            }else{            

                findIndex = 0;  
                find(str, findIndex);  
            }  
        }  
        } else {
        if(!jCheckBox1.isSelected()){
            i = textAreaText.substring(0,cur).toUpperCase().lastIndexOf(str.toUpperCase());  
        }else{
            i = textAreaText.substring(0,cur).indexOf(str);  
        }  

        if (i >= 0) {  
             

            highlight(editFrame.selectedTA,i,i+str.length());
            currentStart=i; currentEnd=i+str.length();
            findIndex = --i; 
        } else {  
            if(findIndex == 0){  
                return;  
            }else{            

                findIndex = textAreaText.length();  
                find(str, findIndex);  
            }  
        }  
        }
    }   
private void downActionPerformed(java.awt.event.ActionEvent evt) {

}

private void formKeyReleased(java.awt.event.KeyEvent evt) {
          int type=2;
      int id=evt.getID();
      int code=evt.getKeyCode();
      int modifier=evt.getModifiers();
      char c=evt.getKeyChar();
    switch(modifier){
        case 0:
            switch(code){
                case 27:
                    setVisible(false);
                    break;
            }
            break;
        case 1:
            break;
        case 2:
            break;
    }
}

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
      currentStart=-1; currentEnd=-1;
        setVisible(false);
    }

    public void highlight(JTextComponent textComp, String pattern) {

    removeHighlights(textComp);

try {
    Highlighter hilite = textComp.getHighlighter();
    Document doc = textComp.getDocument();
    String text = doc.getText(0, doc.getLength());
    boolean sensity=jCheckBox1.isSelected();
    int pos = 0;

    while ((pos = (sensity? text.indexOf(pattern,pos):text.toUpperCase().indexOf(pattern.toUpperCase(), pos))) >= 0) {

        hilite.addHighlight(pos, pos+pattern.length(), myHighlightPainter);
        pos += pattern.length();
    }
} catch (BadLocationException e) {
}
    }
  public void highlight(JTextComponent textComp, int start,int end) {

    removeHighlights(textComp);

try {
    Highlighter hilite = textComp.getHighlighter();

        hilite.addHighlight(start, end, myHighlightPainter);
} catch (BadLocationException e) {
}
    }

public void removeHighlights(JTextComponent textComp) {
    Highlighter hilite = textComp.getHighlighter();
    Highlighter.Highlight[] hilites = hilite.getHighlights();
for (int i=0; i<hilites.length; i++) {
    if (hilites[i].getPainter() instanceof MyHighlightPainter) {
        hilite.removeHighlight(hilites[i]);
    }
}
}

Highlighter.HighlightPainter myHighlightPainter = new MyHighlightPainter(Color.red);

class MyHighlightPainter extends DefaultHighlighter.DefaultHighlightPainter {
    public MyHighlightPainter(Color color) {
        super(color);
    }
}

    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton down;
    private javax.swing.JButton findAll;
    private javax.swing.JButton findNext;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton replaceAll;
    private javax.swing.JButton replaceNext;
    private javax.swing.JRadioButton up;

}