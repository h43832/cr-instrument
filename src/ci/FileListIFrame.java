package ci;

import javax.swing.JInternalFrame;

import java.awt.event.*;
import java.awt.*;
import java.util.Iterator;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import java.io.*;
import java.text.ParseException;
import java.util.ResourceBundle;
import java.util.TreeMap;
import y.ylib.ylib;

public class FileListIFrame extends JInternalFrame {
    static int openFrameCount = 0;
    public ResourceBundle bundle2 = java.util.ResourceBundle.getBundle("ci/Bundle");
    static final int xOffset = 30, yOffset = 30;
    boolean lastSizeIsMax=false;
    DataViewFrame uFrame;
    public DefaultListModel fileListModel = new DefaultListModel();
    public FileListIFrame(DataViewFrame uFrame) {
        initComponents();
        this.uFrame=uFrame;
        this.setTitle("File");
        this.setClosable(false);
        this.setMaximizable(false);
        this.setIconifiable(false);

        

    }
public void getFileList(){
    fileListModel.removeAllElements();
    File dir=new File(uFrame.dataDir);
    if(dir.exists()){

      if(dir.getAbsoluteFile().getParentFile()!=null) fileListModel.addElement("[ .. ]");
      if(!dir.getAbsolutePath().equalsIgnoreCase(new File(uFrame.instrument.getPropsString("record-directory")).getAbsolutePath())){
          fileListModel.addElement("["+bundle2.getString("CrInstrument.xy.msg167")+"]");
      }
      File files[]=dir.listFiles();
      for(int i=0;i<files.length;i++){
         if(files[i].isDirectory()) fileListModel.addElement("["+files[i].getName()+"]");
       }
      for(int i=0;i<files.length;i++){
         if(files[i].isFile()) fileListModel.addElement(files[i].getName());
       }
      }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList(fileListModel);

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameDeactivated(evt);
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameDeiconified(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });

        jList1.setFont(jList1.getFont().deriveFont(jList1.getFont().getSize()-2f));
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jList1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
        JOptionPane.showMessageDialog(this, "iconized");
    }

    private void formInternalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
        JOptionPane.showMessageDialog(this, "Deiconized");
    }

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {

    }

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {

    }

    private void formInternalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {

    }

    private void formPropertyChange(java.beans.PropertyChangeEvent evt) {
        if(!lastSizeIsMax && this.isMaximum) {
            JOptionPane.showMessageDialog(this, "maximum");
            lastSizeIsMax=true;
        }
        else if(lastSizeIsMax && !this.isMaximum) {
            JOptionPane.showMessageDialog(this, "unmaximum");
            lastSizeIsMax=false;
        }
    }

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {
       showData(evt.getClickCount());
    }

    private void jList1KeyReleased(java.awt.event.KeyEvent evt) {
        if(evt.getKeyCode()==38 || evt.getKeyCode()==40 ) showData(1);
      else if(evt.getKeyCode()==10 || evt.getKeyCode()==39){
        if(jList1.getSelectedIndex()>-1){
           showData(2);
        } else if(evt.getKeyCode()==37){
           if(jList1.getSelectedIndex()>-1){
                jList1.setSelectedIndex(0);
                String item=(String)jList1.getSelectedValue();
                if(item.equals("[ .. ]")) showData(2);
              } else if(jList1.getModel().getSize()>0){
                jList1.setSelectedIndex(0);
                String item=(String)jList1.getSelectedValue();
                if(item.equals("[ .. ]")) showData(2);              }
          }
        }
    }
public void showData(int clickCount){
          if(jList1.getSelectedIndex()>-1){
            String item=(String)jList1.getSelectedValue();
            int left=item.indexOf("[");
            int right=item.indexOf("]");
            if(left>-1 && right>-1) item=item.substring(left+1,right).trim();
            String filepath=uFrame.dataDir+File.separator+item;
            String text="";
            if(clickCount==2 && item.equals("..")){
                uFrame.setDataDir(new File(uFrame.dataDir).getAbsoluteFile().getParentFile().getAbsolutePath());
            } else if(clickCount==2 && item.equals(bundle2.getString("CrInstrument.xy.msg167"))){
              uFrame.setDataDir(uFrame.instrument.getPropsString("record-directory"));
            } else if(clickCount==2 && new File(filepath).isDirectory()){
                uFrame.setDataDir(filepath);
            }else if(new File(filepath).isFile()) {
                uFrame.changeFile=true;
                 uFrame.dFrame.setTitle("Data - "+item);

                 getData(filepath);

                 uFrame.dFrame.setData();
                 uFrame.gFrame.showCurve();
             } else uFrame.setTitle("Data Viewer");
       }

}

public void getData(String filename){
  boolean first=true,second=false;
  int type=0;
  int dataTitleCount=0;
  String type3HeadLine01="";
  if(filename!=null && filename.length()>0){
       File f=new File(filename);
       if(f.exists() && f.isFile()){
         StringBuilder sb=new StringBuilder();
         try{
           FileInputStream in=new FileInputStream(filename);
           BufferedReader d= new BufferedReader(new InputStreamReader(in));
           while(true){
	     String str1=d.readLine();

	     if(str1==null) {in.close(); d.close(); break; }

             if(str1.length()>0) {
                 if(first){

                   uFrame.dataTitle=ylib.csvlinetoarray(str1);
                   if((str1.indexOf("RN")>-1 && uFrame.dataTitle.length>2 && uFrame.dataTitle[2].length()>0) || (str1.indexOf("RECORD")>-1 && uFrame.dataTitle.length>2 && uFrame.dataTitle[2].length()>0) || (str1.indexOf("No")>-1 && uFrame.dataTitle.length>2 && uFrame.dataTitle[2].length()>0)){
                     if(str1.indexOf("No")>-1) {
                         type=3;
                         type3HeadLine01=str1;
                     } 
                     else {
                         type=2;
                     uFrame.dataTitle[0]="Time";
                     uFrame.dataTitle[1]="RN";
                     }

                     String fName=f.getName();
                     int inxStation=fName.indexOf("(");
                     if(inxStation>-1){
                     String stationName=fName.substring(0, inxStation);
                       for(int i=2;i<uFrame.dataTitle.length;i++){
                         if(uFrame.dataTitle[i].startsWith(stationName) && uFrame.dataTitle[i].length()>stationName.length()) uFrame.dataTitle[i]=uFrame.dataTitle[i].substring(stationName.length());
                       }
                     }

                     dataTitleCount=uFrame.dataTitle.length;
                     uFrame.dataStrTM=new TreeMap[dataTitleCount];
                     uFrame.dataDTM=new TreeMap[dataTitleCount];
                     int tmInx=0;
                     for(int i=0;i<dataTitleCount;i++) {
                         uFrame.dataStrTM[i]=uFrame.getReusableTM(tmInx);
                         tmInx++;
                         uFrame.dataDTM[i]=uFrame.getReusableTM(tmInx);
                         tmInx++;
                     }
                     first=false;
                     second=true;
                   }
                 }else if(second){
                     if(type==3){
                       uFrame.dataTitle=ylib.csvlinetoarray(str1);
                       uFrame.dataTitle[1]="Time";
                       uFrame.dataTitle[0]="RN";
                       String head1[]=ylib.csvlinetoarray(type3HeadLine01),sn="";
                       for(int i=2;i<uFrame.dataTitle.length;i++){
                           if(head1[i].trim().length()>0){
                               int inx=head1[i].lastIndexOf("-");
                               if(inx>-1 && head1[i].trim().length()>inx+1){
                                   sn=head1[i].substring(inx);
                               }
                           }
                           uFrame.dataTitle[i]=uFrame.dataTitle[i]+sn;
                       }
                     }
                     second=false;
                 }else {

                     String data[]=ylib.csvlinetoarray(str1);

                     for(int i=0;i<dataTitleCount;i++) {
                       try{
                          switch(type){
                           case 2:
                           if(data[0].length()==19 && i<data.length && (i==0 || uFrame.isNumeric(data[i]))) {
                               uFrame.dataStrTM[i].put(uFrame.format4.parse(data[0]).getTime(), data[i]);
                               uFrame.dataDTM[i].put(uFrame.format4.parse(data[0]).getTime(), (i==0? data[i]:Double.parseDouble(data[i])));
                           }
                           break;
                           case 3:
                           if(data[1].length()==19 && i<data.length && (i==1 || uFrame.isNumeric(data[i]))) {
                               uFrame.dataStrTM[i].put(uFrame.format4.parse(data[1]).getTime(), data[i]);
                               uFrame.dataDTM[i].put(uFrame.format4.parse(data[1]).getTime(), (i==1? data[i]:Double.parseDouble(data[i])));
                           }
                           break;
                          }
                       } catch(ParseException e){

                         }
                     }
                   }
             }
           }

           if(uFrame.dataStrTM==null) {
               uFrame.dataTitle=ylib.csvlinetoarray("Time,RN");
               dataTitleCount=uFrame.dataTitle.length;
               uFrame.dataStrTM=new TreeMap[dataTitleCount];
               uFrame.dataDTM=new TreeMap[dataTitleCount];
               int tmInx=0;
                     for(int i=0;i<dataTitleCount;i++) {
                         uFrame.dataStrTM[i]=uFrame.getReusableTM(tmInx);
                         tmInx++;
                         uFrame.dataDTM[i]=uFrame.getReusableTM(tmInx);
                         tmInx++;
                     }
           }
           uFrame.cellColor=new int[dataTitleCount][uFrame.dataStrTM[0].size()];
           for(int i=0;i<uFrame.cellColor.length;i++){
               for(int j=0;j<uFrame.cellColor[i].length;j++) uFrame.cellColor[i][j]=0;
           }
	   in.close();
	   d.close();
           }catch(FileNotFoundException e){
               e.printStackTrace();
           }
    catch(IOException e){

        e.printStackTrace();
    }
    }
       else System.out.println("file \""+filename+"\" not exists.");
    }

  }

    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;

}